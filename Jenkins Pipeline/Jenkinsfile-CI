@Library('github.com/ranjitaws2020/java-shared-library@pipeline') _

pipeline {
    agent any
      environment {
       sonarlogin = credentials('sonarqube-token')
       nexuscred = credentials('nexus-user')
       
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "localhost:8081"
        NEXUS_REPOSITORY = "java-mvn-CI-repo"
        NEXUS_CREDENTIAL_ID = "nexus-user"
       } 
    tools {
        maven 'maven-home'
        jdk 'jdk8'
    }
    stages {
        stage('Build') {
             steps {                
                BuildApp()
             }
        }
         stage('Test') {
            steps {
                 TestApp()
            }
             post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
        stage('Sonar Analysis') {
           steps {
               SonarApp(sonarlogin)                        
           }
        }
        stage('Store war to Nexus') {
            steps{
                StoreToNexus()                
            }           
        } 
        
        stage('Store war to Nexus') { 
            steps{ 
              script{ 
                    pom = readMavenPom file: "pom.xml"; 
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}"); 
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}" 
                    artifactPath = filesByGlob[0].path; 
                    artifactExists = fileExists artifactPath; 
                    if(artifactExists) { 
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}"; 
                        nexusArtifactUploader( 
                            nexusVersion: NEXUS_VERSION, 
                            protocol: NEXUS_PROTOCOL, 
                            nexusUrl: NEXUS_URL, 
                            groupId: pom.groupId, 
                            version: pom.version, 
                            repository: NEXUS_REPOSITORY, 
                            credentialsId: NEXUS_CREDENTIAL_ID, 
                            artifacts: [ 
                                [artifactId: pom.artifactId, 
                                classifier: '', 
                                file: artifactPath, 
                                type: pom.packaging], 
                                [artifactId: pom.artifactId, 
                                classifier: '', 
                                file: "pom.xml", 
                                type: "pom"] 
                            ] 
                        ); 
                    } else { 
                        error "*** File: ${artifactPath}, could not be found"; 
                    } 
                } 
            } 
         }
    }
}
