@Library('github.com/ranjitaws2020/java-shared-library@pipeline') _

pipeline {
    agent any
     environment {
        azcon = credentials('az_sp')
      }
    stages {  
        stage('Provision Infrastructure') {
            steps {
                bat label: '', script: """
                  set ARM_CLIENT_ID=$azcon_CLIENT_ID
                  set ARM_CLIENT_SECRET=$azcon_CLIENT_SECRET
                  set ARM_SUBSCRIPTION_ID=$azcon_SUBSCRIPTION_ID
                  set ARM_TENANT_ID=$azcon_TENANT_ID
                terraform -chdir=infra init -input=false
                terraform -chdir=infra plan -out=tfplan -input=false
                terraform -chdir=infra apply -input=false tfplan   
                """
            }
        }
        stage('Pull the file off Nexus') {
            steps {
                DownloadFromNexus()                  
            }
        }
        stage('Fetch Public IP') {
            environment {
                PATH = "${env.PATH};C:\\Program Files (x86)\\Microsoft SDKs\\Azure\\CLI2\\wbin"
            }
            steps {
                // fetch public IP of the VM using Azure CLI
                script {
                
                powershell label: '', script: """
                az login --service-principal -u $azcon_CLIENT_ID -p $azcon_CLIENT_SECRET -t $azcon_TENANT_ID
                az vm list-ip-addresses --resource-group app_grp --name linuxvm > fetchpublicip.json
                (Get-Content fetchpublicip.json | ConvertFrom-Json).virtualMachine.network.publicIpAddresses.ipAddress > output.txt
                """              
                }
            }
        }
        stage('Deploy Artifact') {
              steps {
                  withCredentials([azureServicePrincipal(credentialsId: 'az_sp', tenantIdVariable: 'AZURE_TENANT_ID', subscriptionIdVariable: 'AZURE_SUBSCRIPTION_ID', clientIdVariable: 'AZURE_CLIENT_ID', clientSecretVariable: 'AZURE_CLIENT_SECRET')]) {
                        script {
                          def creds = azureServicePrincipal(tenantId: 'env.AZURE_TENANT_ID', clientId: 'env.AZURE_CLIENT_ID', clientSecret: 'env.AZURE_CLIENT_SECRET')
                          def azure = Azure.authenticate(creds)
                          def vm = azure.virtualMachines().getByResourceGroup('app-grp', 'linuxvm')
                          def publicIpAddress = vm.getPrimaryPublicIPAddress()

                            // rest of the steps
                            def ssh = [:]
                            ssh.name = 'linuxvm'
                            ssh.host = publicIpAddress.ipAddress
                            ssh.user = 'adminuser'
                            ssh.port = 22
                            ssh.identityFile = azureCreds.getFile()
                            ssh.allowAnyHosts = true

                            ssh.command "sudo mkdir -p /temp && sudo chmod -R 777 /temp"

                            ssh.from('JavaMaven.war').into('/temp')
                            ssh.from('dockerfile').into('/temp')

                            ssh.command 'cd /temp && docker build -t javasampletomcat:latest .'
                            ssh.command 'cd /temp && docker save javasampletomcat:latest | docker load'

                            ssh.command 'docker run -d --name HelloWorld -p 8280:80 javasampletomcat:latest'                     
                    }                 
                }
             }
         }       
    }
}
