@Library('github.com/ranjitaws2020/java-shared-library@pipeline') _

pipeline {
    agent any
    
    stages {
        stage('Provision Infrastructure') {
            steps {
                  bat label: '', script: """
                  terraform  -chdir=infra init -input=false
                  terraform  -chdir=infra plan -out=tfplan -input=false
                  terraform  -chdir=infra apply -input=false tfplan   
                  """
            }
        }
        stage('Pull the file off Nexus') {
            steps{
                  DownloadFromNexus()                    
            }
        }
        stage('Create SSH credentials') {
            environment {
                SSH_KEY = sh(script: 'cat /infra/linuxkey.pem', returnStdout: true).trim()
            }
            steps {
                // Create SSH credentials dynamically using the SSH_KEY
                withCredentials([sshUserPrivateKey(credentialsId: 'my-ssh-credentials', keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER')]) {
                    sh 'echo "SSH credentials created"'
                }
            }
        }
        stage('Deploy Artifact') {
            steps {
                script {
                    sshagent(['my-ssh-credentials']) {
                        remote {
                            // Set the connection details for the remote host
                            name = 'azurevm'
                            user = env.SSH_USER
                            allowAnyHosts = true
                            host = 'linuxvm'
                            identityFile = env.SSH_KEY

                            // Execute the Docker commands on the remote host
                            sh "docker build -t javasampletomcat:latest ."
                            sh "docker save javasampletomcat:latest | docker load"
                            sh "docker run -d --name HelloWorld -p 8280:80 javasampletomcat:latest"
                        }
                    }
                }
            }
        }
    }
}
